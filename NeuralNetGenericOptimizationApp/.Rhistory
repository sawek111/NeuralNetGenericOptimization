library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
install.packages("nnet")
library(nnet)
trainset <- cbind(iris[, 1:4], class.ind(iris$Species))
espnnet2=neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, trainset)
plot(espnnet2)
View(trainset)
getwd()
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
install.packages("caret")
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
install.packages("caret")
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
install.packages("caret")
getwd()
setwd("C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/spam.csv")
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/spam.csv')
setwd('C:/Users/Saper')
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <- data(spam.csv)
lol <-read.csv2('spam.csv')
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
createProgressBar <- function(iterationNumber)
{
progress.bar <- create_progress_bar("text")
progress.bar$init(iterationNumber)
return(progress.bar)
}
countAccuraciesNnt <- function(class, trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
neuralNetwork <- nnet(class, data = trainingset, size = hiddenNeuronsValue, maxit = iterationValue, decay = decayValue, MaxNWts = maxNWtsValue)
pred.neuralNetwork <- predict(neuralNetwork,testset,type = "class")
fold_accuracy <- mean(pred.neuralNetwork == testset$Class)
return(fold_accuracy)
}
addColumnWithNumberOfObservation <- function(dataName, k)
{
id <- sample(1:k, nrow(dataName), replace = TRUE)
return(id)
}
preprocessing <- function(dataName, classColumn) {
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
dataName[, names(dataName)== classColumn]
dataName[, names(dataName)== classColumn] <- as.factor(dataName[,names(dataName) == classColumn])
x<- as.matrix(dataName[,names(dataName) != classColumn])
mode(x) = "numeric"
dataName[,names(dataName) != classColumn] <- x
return((dataName))
}
loadPackages <- function()
{
pkgTest("rpart")
pkgTest("plyr")
pkgTest("FSelector")
pkgTest("corrplot")
pkgTest("Mass")
pkgTest("class")
pkgTest("caret")
pkgTest("nnet")
pkgTest("ggplot2")
library(plyr)
library(rpart)
library(FSelector)
library(corrplot)
library(MASS)
library(class)
library(caret)
library(nnet)
library(ggplot2)
return()
}
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
View(lol)
lol2 <- preprocessing(lol,Class)
lol2 <- preprocessing(lol,Class)
lol2 <- preprocessing(lol,"Class")
View(lol2)
preprocessing2 <- function(dataName, classColumn) {
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
dataName[, names(dataName)== classColumn]
dataName[, names(dataName)== classColumn] <- as.factor(dataName[,names(dataName) == classColumn])
x<- as.matrix(dataName[,names(dataName) != classColumn])
mode(x) = "numeric"
dataName[,names(dataName) != classColumn] <- x
return((dataName))
}
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
lol2 <-as.data.frame(lol)
lol2 <-na.omit(lol2)
classColumnNumber<- 3
colnames(X)[classColumnNumber] <- "Class"
colnames(lol2)[classColumnNumber] <- "Class"
View(lol2)
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
classColumnNumber<- 58
lol2 <-as.data.frame(lol)
lol2 <- preprocessing(lol,"Class")
classColumnNumber<- 58
lol2 <-as.data.frame(lol)
lol2 <-na.omit(lol2)
colnames(lol2)[classColumnNumber] <- "Class"
lol2$Class <- as.factor(lol2$Class)
View(lol2)
x<- as.matrix(dataName[,names(dataName) != "Class"])
x<- as.matrix(lol2[,names(lol2) != "Class"])
mode(x) = "numeric"
lol2 <- preprocessing2(lol,58)
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
lol2 <- preprocessing2(lol,58)
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
dataName <-read.csv2('spam.csv')
classColumnNumber <- 58
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
colnames(dataName)[classColumnNumber] <- "Class"
dataName$Class <- as.factor(dataName$Class)
x<- as.matrix(dataName[,names(dataName) != "Class"])
mode(x) = "numeric"
dataName[,names(dataName) != "Class"] <- x
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
createProgressBar <- function(iterationNumber)
{
progress.bar <- create_progress_bar("text")
progress.bar$init(iterationNumber)
return(progress.bar)
}
countAccuraciesNnt <- function(class, trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
neuralNetwork <- nnet(class, data = trainingset, size = hiddenNeuronsValue, maxit = iterationValue, decay = decayValue, MaxNWts = maxNWtsValue)
pred.neuralNetwork <- predict(neuralNetwork,testset,type = "class")
fold_accuracy <- mean(pred.neuralNetwork == testset$Class)
return(fold_accuracy)
}
addColumnWithNumberOfObservation <- function(dataName, k)
{
id <- sample(1:k, nrow(dataName), replace = TRUE)
return(id)
}
preprocessing <- function(dataName, classColumn) {
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
dataName[, names(dataName)== classColumn]
dataName[, names(dataName)== classColumn] <- as.factor(dataName[,names(dataName) == classColumn])
x<- as.matrix(dataName[,names(dataName) != classColumn])
mode(x) = "numeric"
dataName[,names(dataName) != classColumn] <- x
return((dataName))
}
preprocessing2 <- function(dataName, classColumnNumber) {
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
colnames(dataName)[classColumnNumber] <- "Class"
dataName$Class <- as.factor(dataName$Class)
x<- as.matrix(dataName[,names(dataName) != "Class"])
mode(x) = "numeric"
dataName[,names(dataName) != "Class"] <- x
return((dataName))
}
loadPackages <- function()
{
pkgTest("rpart")
pkgTest("plyr")
pkgTest("FSelector")
pkgTest("corrplot")
pkgTest("Mass")
pkgTest("class")
pkgTest("caret")
pkgTest("nnet")
pkgTest("ggplot2")
library(plyr)
library(rpart)
library(FSelector)
library(corrplot)
library(MASS)
library(class)
library(caret)
library(nnet)
library(ggplot2)
return()
}
lol <- preprocessing2(lol, 58)
View(lol)
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
path
path <- 'C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp'
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
loadPackages <- function()
{
pkgTest("rpart")
pkgTest("plyr")
pkgTest("FSelector")
pkgTest("corrplot")
pkgTest("MASS")
pkgTest("class")
pkgTest("caret")
pkgTest("nnet")
pkgTest("ggplot2")
library(plyr)
library(rpart)
library(FSelector)
library(corrplot)
library(MASS)
library(class)
library(caret)
library(nnet)
library(ggplot2)
return()
}
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
classifyWithNNt <- function(pathToDirectory, fileName, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
loadPackages()
setwd(pathToDirectory)
someData <- read.csv2(fileName)
k = 10
accuracyNntFilter<- vector('numeric')
accuracyNnt <- vector('numeric')
timeNNt <- vector('numeric')
timeNNtFilter <- vector('numeric')
someData$Class <- as.numeric(someData$Class)
someData <- preprocessing(someData, "Class")
someData$id <- addColumnWithNumberOfObservation(someData, k)
namesXlab <- c("nnt", "nnt after filtering")
list <- 1:k
for (i in 1:k) {
trainingset <- subset(someData, id %in% list[-i])
testset <- subset(someData, id %in% c(i))
trainingset$id <- NULL
testset$id <- NULL
start <- Sys.time()
accuracyNnt <- countAccuraciesNnt(Class~., trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
stop <- Sys.time()
timeNNt <- append(timeNNt, stop-start)
}
finalAccuracies <- c(mean(accuracyNnt))
times <- c(mean(timeNNt))
labelsAcc <- vector()
labelsTime <- vector()
for (i in 1:length(namesXlab))
{
labelsAcc[i] <- round(finalAccuracies[i], 3)
labelsTime[i] <- round(times[i], 2)
}
results <- c(finalAccuracies, times)
return(results)
}
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
classifyWithNNt <- function(pathToDirectory, fileName, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
loadPackages()
setwd(pathToDirectory)
someData <- read.csv2(fileName)
k = 10
accuracyNntFilter<- vector('numeric')
accuracyNnt <- vector('numeric')
timeNNt <- vector('numeric')
timeNNtFilter <- vector('numeric')
someData$Class <- as.numeric(someData$Class)
someData <- preprocessing(someData, "Class")
someData$id <- addColumnWithNumberOfObservation(someData, k)
namesXlab <- c("nnt", "nnt after filtering")
list <- 1:k
for (i in 1:k) {
trainingset <- subset(someData, id %in% list[-i])
testset <- subset(someData, id %in% c(i))
trainingset$id <- NULL
testset$id <- NULL
start <- Sys.time()
accuracyNnt <- countAccuraciesNnt(Class~., trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
stop <- Sys.time()
timeNNt <- append(timeNNt, stop-start)
}
finalAccuracies <- c(mean(accuracyNnt))
times <- c(mean(timeNNt))
labelsAcc <- vector()
labelsTime <- vector()
for (i in 1:length(namesXlab))
{
labelsAcc[i] <- round(finalAccuracies[i], 3)
labelsTime[i] <- round(times[i], 2)
}
results <- c(finalAccuracies, times)
return(results)
}
classifyWithNNt <- function(pathToDirectory, fileName, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
loadPackages()
setwd(pathToDirectory)
someData <- read.csv2(fileName)
k = 10
accuracyNntFilter<- vector('numeric')
accuracyNnt <- vector('numeric')
timeNNt <- vector('numeric')
timeNNtFilter <- vector('numeric')
someData$Class <- as.numeric(someData$Class)
someData <- preprocessing(someData, "Class")
someData$id <- addColumnWithNumberOfObservation(someData, k)
namesXlab <- c("nnt", "nnt after filtering")
list <- 1:k
for (i in 1:k) {
trainingset <- subset(someData, id %in% list[-i])
testset <- subset(someData, id %in% c(i))
trainingset$id <- NULL
testset$id <- NULL
start <- Sys.time()
accuracyNnt <- countAccuraciesNnt(Class~., trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
stop <- Sys.time()
timeNNt <- append(timeNNt, stop-start)
}
finalAccuracies <- c(mean(accuracyNnt))
times <- c(mean(timeNNt))
labelsAcc <- vector()
labelsTime <- vector()
for (i in 1:length(namesXlab))
{
labelsAcc[i] <- round(finalAccuracies[i], 3)
labelsTime[i] <- round(times[i], 2)
}
results <- c(finalAccuracies, times)
return(results)
}
debugSource('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
createProgressBar <- function(iterationNumber)
{
progress.bar <- create_progress_bar("text")
progress.bar$init(iterationNumber)
return(progress.bar)
}
countAccuraciesNnt <- function(class, trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
neuralNetwork <- nnet(class, data = trainingset, size = hiddenNeuronsValue, maxit = iterationValue, decay = decayValue, MaxNWts = maxNWtsValue)
pred.neuralNetwork <- predict(neuralNetwork,testset,type = "class")
fold_accuracy <- mean(pred.neuralNetwork == testset$Class)
return(fold_accuracy)
}
addColumnWithNumberOfObservation <- function(dataName, k)
{
id <- sample(1:k, nrow(dataName), replace = TRUE)
return(id)
}
preprocessing <- function(dataName, classColumnNumber) {
dataName <-as.data.frame(dataName)
dataName <-na.omit(dataName)
colnames(dataName)[classColumnNumber] <- "Class"
dataName$Class <- as.factor(dataName$Class)
x<- as.matrix(dataName[,names(dataName) != "Class"])
mode(x) = "numeric"
dataName[,names(dataName) != "Class"] <- x
return((dataName))
}
loadPackages <- function()
{
pkgTest("rpart")
pkgTest("plyr")
pkgTest("FSelector")
pkgTest("corrplot")
pkgTest("MASS")
pkgTest("class")
pkgTest("caret")
pkgTest("nnet")
pkgTest("ggplot2")
library(plyr)
library(rpart)
library(FSelector)
library(corrplot)
library(MASS)
library(class)
library(caret)
library(nnet)
library(ggplot2)
return()
}
###########################
setwd('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp')
lol <-read.csv2('spam.csv')
lol <- preprocessing2(lol, 58)
path <- 'C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp'
#a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
################
classifyWithNNt <- function(pathToDirectory, fileName, classColumnNumber, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
{
loadPackages()
setwd(pathToDirectory)
someData <- read.csv2(fileName)
k = 10
accuracyNntFilter<- vector('numeric')
accuracyNnt <- vector('numeric')
timeNNt <- vector('numeric')
timeNNtFilter <- vector('numeric')
someData$Class <- as.numeric(someData$Class)
someData <- preprocessing(someData, classColumnNumber)
someData$id <- addColumnWithNumberOfObservation(someData, k)
namesXlab <- c("nnt", "nnt after filtering")
list <- 1:k
for (i in 1:k) {
trainingset <- subset(someData, id %in% list[-i])
testset <- subset(someData, id %in% c(i))
trainingset$id <- NULL
testset$id <- NULL
start <- Sys.time()
accuracyNnt <- countAccuraciesNnt(Class~., trainingset, testset, hiddenNeuronsValue, iterationValue, decayValue, maxNWtsValue)
stop <- Sys.time()
timeNNt <- append(timeNNt, stop-start)
}
finalAccuracies <- c(mean(accuracyNnt))
times <- c(mean(timeNNt))
labelsAcc <- vector()
labelsTime <- vector()
for (i in 1:length(namesXlab))
{
labelsAcc[i] <- round(finalAccuracies[i], 3)
labelsTime[i] <- round(times[i], 2)
}
results <- c(finalAccuracies, times)
return(results)
}
a <- classifyWithNNt(path,'spam.csv',10,100,0.5,50000)
path <- 'C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/spam.csv'
a <- classifyWithNNt(path,'spam.csv',58, 10,100,0.5)
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
source('~/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/nnt.R', echo=TRUE)
a <- classifyWithNNt(path,'spam.csv',58, 10,100,0.5)
a <- classifyWithNNt(path,58, 10,100,0.5)
a <- classifyWithNNt('C:/Users/Saper/Documents/NeuralNetGenericOptimization/NeuralNetGenericOptimizationApp/spam.csv',58, 10,100,0.5)
Test <- function()
{
return(true)
}
Test <- function()
{
return(TRUE)
}
lol <- Test()
someData <- preprocessing(someData, classColumnNumber)
